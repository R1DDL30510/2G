param(
    [string]$OutputRoot,
    [switch]$IncludeDocker
)

$ErrorActionPreference = 'Stop'
$scriptRoot = Split-Path -Parent $MyInvocation.MyCommand.Path
$repoRoot = Split-Path -Parent (Split-Path -Parent $scriptRoot)

function Ensure-Directory {
    param([Parameter(Mandatory = $true)][string]$Path)
    if (-not (Test-Path $Path)) {
        New-Item -Path $Path -ItemType Directory -Force | Out-Null
    }
}

function Get-EnvValue {
    param([string]$Key)
    $envFile = Join-Path $repoRoot '.env'
    if (-not (Test-Path $envFile)) {
        return $null
    }
    foreach ($line in Get-Content $envFile) {
        if ($line -match "^\s*$([regex]::Escape($Key))=(.+)$") {
            return $Matches[1]
        }
    }
    return $null
}

function Invoke-CommandCapture {
    param([string]$Command, [string[]]$Arguments = @())
    $result = [pscustomobject]@{ Success = $false; Output = ''; ExitCode = $null; Error = $null }
    try {
        $output = & $Command @Arguments 2>&1
        $exit = $LASTEXITCODE
        $text = ($output | Out-String).Trim()
        if ($exit -eq $null -or $exit -eq 0) {
            $result.Success = $true
        }
        elseif (-not $text) {
            $text = "Exit code $exit"
        }
        $result.ExitCode = $exit
        $result.Output = $text
    }
    catch {
        $result.Error = $_.Exception.Message
    }
    return $result
}

if (-not $OutputRoot) {
    $evidenceEnv = Get-EnvValue -Key 'EVIDENCE_ROOT'
    if ($evidenceEnv) {
        if ([System.IO.Path]::IsPathRooted($evidenceEnv)) {
            $OutputRoot = $evidenceEnv
        }
        else {
            $OutputRoot = Join-Path $repoRoot $evidenceEnv
        }
    }
    else {
        $OutputRoot = Join-Path $repoRoot 'docs/evidence'
    }
}

Ensure-Directory -Path $OutputRoot
$stateRoot = Join-Path $OutputRoot 'state'
Ensure-Directory -Path $stateRoot
$timestamp = Get-Date -Format 'yyyyMMdd-HHmmss'
$runDir = Join-Path $stateRoot ("state-" + $timestamp)
Ensure-Directory -Path $runDir

$report = @('# Capture state report', '', "*Generated by scripts/clean/capture_state.ps1 on $([DateTime]::Now.ToString('u'))*", '')

$gpuList = Invoke-CommandCapture -Command 'nvidia-smi' -Arguments @('-L')
if ($gpuList.Success -and $gpuList.Output) {
    Set-Content -Path (Join-Path $runDir 'nvidia-smi-L.txt') -Value $gpuList.Output -Encoding UTF8
    $report += '## NVIDIA GPUs'
    $report += ''
    foreach ($line in $gpuList.Output -split "`n") {
        if ($line.Trim()) { $report += "- $line" }
    }
    $report += ''
}
else {
    $report += '## NVIDIA GPUs'
    $report += ''
    $message = if ($gpuList.Error) { $gpuList.Error } else { 'nvidia-smi not available.' }
    $report += "- $message"
    $report += ''
}

$gpuQuery = Invoke-CommandCapture -Command 'nvidia-smi' -Arguments @('--query-gpu=index,name,memory.total,memory.free,temperature.gpu,driver_version', '--format=csv,noheader')
if ($gpuQuery.Success -and $gpuQuery.Output) {
    Set-Content -Path (Join-Path $runDir 'nvidia-smi-query.csv') -Value $gpuQuery.Output -Encoding UTF8
}

$ollamaVersion = Invoke-CommandCapture -Command 'ollama' -Arguments @('--version')
$ollamaList = Invoke-CommandCapture -Command 'ollama' -Arguments @('list')
if ($ollamaVersion.Success) {
    $report += '## Ollama'
    $report += ''
    $report += "- Version: $($ollamaVersion.Output)"
    if ($ollamaList.Success -and $ollamaList.Output) {
        $listPath = Join-Path $runDir 'ollama-list.txt'
        Set-Content -Path $listPath -Value $ollamaList.Output -Encoding UTF8
        $report += "- Model inventory captured at $listPath"
    }
    else {
        $report += '- Model inventory unavailable.'
    }
    $report += ''
}
else {
    $report += '## Ollama'
    $report += ''
    $msg = if ($ollamaVersion.Error) { $ollamaVersion.Error } else { 'ollama CLI not detected.' }
    $report += "- $msg"
    $report += ''
}

if ($IncludeDocker) {
    $report += '## Docker snapshot'
    $report += ''
    $dockerInfo = Invoke-CommandCapture -Command 'docker' -Arguments @('info')
    if ($dockerInfo.Success -and $dockerInfo.Output) {
        $infoPath = Join-Path $runDir 'docker-info.txt'
        Set-Content -Path $infoPath -Value $dockerInfo.Output -Encoding UTF8
        $report += "- docker info written to $infoPath"
    }
    else {
        $report += '- docker info unavailable.'
    }

    $composeFile = [System.IO.Path]::Combine($repoRoot, 'infra', 'compose', 'docker-compose.yml')
    if (Test-Path $composeFile) {
        $psResult = Invoke-CommandCapture -Command 'docker' -Arguments @('compose', '-f', $composeFile, 'ps')
        if ($psResult.Success -and $psResult.Output) {
            $psPath = Join-Path $runDir 'docker-compose-ps.txt'
            Set-Content -Path $psPath -Value $psResult.Output -Encoding UTF8
            $report += "- docker compose ps written to $psPath"
        }
        else {
            $report += '- docker compose ps unavailable.'
        }
    }
    else {
        $report += '- Compose file not found; skipped docker compose ps.'
    }
    $report += ''
}

$reportPath = Join-Path $runDir 'report.md'
Set-Content -Path $reportPath -Value ($report -join "`n") -Encoding UTF8

Write-Output "State captured under $runDir"
