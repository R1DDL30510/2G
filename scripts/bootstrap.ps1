param(
    [switch]$Report
)

$ErrorActionPreference = 'SilentlyContinue'
$root = Split-Path -Parent $MyInvocation.MyCommand.Path | Split-Path -Parent

function Detect($cmd,$args){ try{ $o = & $cmd $args 2>$null; if($LASTEXITCODE -eq 0){ return ($o | Select-Object -First 1) } } catch{} return $null }

if ($Report) {
    $envPath = Join-Path $root 'docs/ENVIRONMENT.md'
    $os = (Get-CimInstance Win32_OperatingSystem | Select-Object -First 1)
    $lines = @()
    $lines += '# Environment Report'
    $lines += ''
    $lines += '*Generated by scripts/bootstrap.ps1 -Report*'
    $lines += ''
    $lines += "- OS: $($os.Caption) $($os.Version) (Build $($os.BuildNumber))"
    $lines += "- Architecture: $($os.OSArchitecture)"
    $lines += "- PowerShell: $($PSVersionTable.PSVersion)"
    foreach($pair in @(
        @{k='Git'; v=Detect 'git' '--version'},
        @{k='Docker'; v=Detect 'docker' '--version'},
        @{k='Docker Compose'; v=Detect 'docker' 'compose version'},
        @{k='WSL'; v=Detect 'wsl' '--status'},
        @{k='Python'; v=Detect 'python' '--version'},
        @{k='Node'; v=Detect 'node' '-v'},
        @{k='npm'; v=Detect 'npm' '-v'},
        @{k='dotnet'; v=Detect 'dotnet' '--info'}
    )){
        $val = if ($pair.v) { $pair.v } else { 'Not detected' }
        $lines += "- $($pair.k): $val"
    }
    Set-Content -Path $envPath -Value ($lines -join "`n") -Encoding UTF8
    Write-Output "Wrote $envPath"
    exit 0
}

# Create local .env if missing
$envSample = Join-Path $root '.env.example'
$envLocal = Join-Path $root '.env'
if ((Test-Path $envSample) -and -not (Test-Path $envLocal)) {
    Copy-Item $envSample $envLocal
    Write-Output "Created .env from .env.example"
}

# Ensure directories
foreach($d in @('data','models')){ $p = Join-Path $root $d; if (-not (Test-Path $p)) { New-Item -Path $p -ItemType Directory | Out-Null } }
Write-Output "Bootstrap complete. Use scripts/compose.ps1 to manage the stack."

